export enum UserErrors {
  EMAIL_ALREADY_EXISTS = "EMAIL_ALREADY_EXISTS",
  NO_USER_FOUND = "NO_USER_FOUND",
  WRONG_CREDENTIALS = "WRONG_CREDENTIALS",
  VALIDATION_ERROR = "VALIDATION_ERROR",
  REGISTRATION_ERROR = "REGISTRATION_ERROR",
  LOGIN_ERROR = "LOGIN_ERROR",
  UNAUTHORIZED = "UNAUTHORIZED",
  SERVER_ERROR = "SERVER_ERROR",
  TOKEN_EXPIRED = "TOKEN_EXPIRED",
  REFRESH_TOKEN_INVALID = "REFRESH_TOKEN_INVALID",
  PASSWORD_RESET_ERROR = "PASSWORD_RESET_ERROR",
  EMAIL_SEND_ERROR = "EMAIL_SEND_ERROR",
}

export enum ProductErrors {
  PRODUCT_NOT_FOUND = "PRODUCT_NOT_FOUND",
  PRODUCT_CREATION_ERROR = "PRODUCT_CREATION_ERROR",
  PRODUCT_UPDATE_ERROR = "PRODUCT_UPDATE_ERROR",
  PRODUCT_DELETION_ERROR = "PRODUCT_DELETION_ERROR",
  INVALID_PRODUCT_DATA = "INVALID_PRODUCT_DATA",
  SERVER_ERROR = "SERVER_ERROR"
}

export enum OrderErrors {
  ORDER_NOT_FOUND = "ORDER_NOT_FOUND",
  ORDER_CREATION_ERROR = "ORDER_CREATION_ERROR",
  ORDER_UPDATE_ERROR = "ORDER_UPDATE_ERROR",
  INVALID_ORDER_DATA = "INVALID_ORDER_DATA",
  INSUFFICIENT_STOCK = "INSUFFICIENT_STOCK",
}

export enum PaymentErrors {
  PAYMENT_PROCESSING_ERROR = "PAYMENT_PROCESSING_ERROR",
  INVALID_PAYMENT_METHOD = "INVALID_PAYMENT_METHOD",
  PAYMENT_DECLINED = "PAYMENT_DECLINED",
}

export type ErrorType = UserErrors | ProductErrors | OrderErrors | PaymentErrors;

export class ErrorResponse extends Error {
  constructor(
    public type: ErrorType,
    message: string,
    public details?: any,
  ) {
    super(message);
  }
}

export const createErrorResponse = (type: ErrorType, message: string, details?: any): ErrorResponse => {
  return new ErrorResponse(type, message, details);
};
