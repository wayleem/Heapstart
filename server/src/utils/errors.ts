export enum CommonErrors {
	VALIDATION_ERROR = "VALIDATION_ERROR",
	SERVER_ERROR = "SERVER_ERROR",
	UNAUTHORIZED = "UNAUTHORIZED",
	FORBIDDEN = "FORBIDDEN",
	NOT_FOUND = "NOT_FOUND",
	BAD_REQUEST = "BAD_REQUEST",
}

export enum UserErrors {
	EMAIL_ALREADY_EXISTS = "EMAIL_ALREADY_EXISTS",
	NO_USER_FOUND = "NO_USER_FOUND",
	WRONG_CREDENTIALS = "WRONG_CREDENTIALS",
	REGISTRATION_ERROR = "REGISTRATION_ERROR",
	LOGIN_ERROR = "LOGIN_ERROR",
	TOKEN_EXPIRED = "TOKEN_EXPIRED",
	REFRESH_TOKEN_INVALID = "REFRESH_TOKEN_INVALID",
	PASSWORD_RESET_ERROR = "PASSWORD_RESET_ERROR",
	EMAIL_SEND_ERROR = "EMAIL_SEND_ERROR",
	PROFILE_UPDATE_ERROR = "PROFILE_UPDATE_ERROR",
}

export enum ProductErrors {
	PRODUCT_NOT_FOUND = "PRODUCT_NOT_FOUND",
	PRODUCT_CREATION_ERROR = "PRODUCT_CREATION_ERROR",
	PRODUCT_UPDATE_ERROR = "PRODUCT_UPDATE_ERROR",
	PRODUCT_DELETION_ERROR = "PRODUCT_DELETION_ERROR",
	INVALID_PRODUCT_DATA = "INVALID_PRODUCT_DATA",
	PRODUCT_STOCK_ERROR = "PRODUCT_STOCK_ERROR",
}

export enum OrderErrors {
	ORDER_NOT_FOUND = "ORDER_NOT_FOUND",
	ORDER_CREATION_ERROR = "ORDER_CREATION_ERROR",
	ORDER_UPDATE_ERROR = "ORDER_UPDATE_ERROR",
	INVALID_ORDER_DATA = "INVALID_ORDER_DATA",
	INSUFFICIENT_STOCK = "INSUFFICIENT_STOCK",
	ORDER_STATUS_CHANGE_ERROR = "ORDER_STATUS_CHANGE_ERROR",
}

export enum PaymentErrors {
	PAYMENT_PROCESSING_ERROR = "PAYMENT_PROCESSING_ERROR",
	INVALID_PAYMENT_METHOD = "INVALID_PAYMENT_METHOD",
	PAYMENT_DECLINED = "PAYMENT_DECLINED",
	PAYMENT_INTENT_CREATION_ERROR = "PAYMENT_INTENT_CREATION_ERROR",
}

export enum PromoCodeErrors {
	PROMO_CODE_NOT_FOUND = "PROMO_CODE_NOT_FOUND",
	PROMO_CODE_EXPIRED = "PROMO_CODE_EXPIRED",
	PROMO_CODE_USAGE_LIMIT_REACHED = "PROMO_CODE_USAGE_LIMIT_REACHED",
	INVALID_PROMO_CODE = "INVALID_PROMO_CODE",
}

export type ErrorType = CommonErrors | UserErrors | ProductErrors | OrderErrors | PaymentErrors | PromoCodeErrors;

export class ErrorResponse extends Error {
	constructor(
		public type: ErrorType,
		message: string,
		public statusCode: number = 400,
		public details?: any,
	) {
		super(message);
		this.name = "ErrorResponse";
	}
}

export const createErrorResponse = (
	type: ErrorType,
	message: string,
	statusCode: number = 400,
	details?: any,
): ErrorResponse => {
	return new ErrorResponse(type, message, statusCode, details);
};
